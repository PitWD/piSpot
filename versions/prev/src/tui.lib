#!/bin/bash

###  G L O B A L  -  Variables  ###
declare -a CURSOR_Y_ARR
declare -a CURSOR_X_ARR
declare -i CURSOR_Y=1
declare -i CURSOR_X=1
declare -i TERM_X=80
declare -i TERM_Y=24
declare -i errCnt=0
declare -i fileCNT=0
declare -i dirCNT=0
declare -i action=1
declare -i actionLen=1 # Length of the action counter, #  1,2,3 => [1],[.2],[..3]
# Set the following (app depending) variables in your app
declare -i linesCNT=1 # starts with minimum lines to print (+/- with every printed/deleted line)
declare -i finalCNT=1 # same but for functions - fixed values (functions working with absolute cursor position)

# directory of lib calling script (in most cases already set by the calling script)
if [[ -z "$SCRIPT_DIR" ]]; then
    SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
fi
# TUI_DIR like SCRIPT_DIR, but for printing reasons -- replace /home/username with ~
TUI_DIR="$SCRIPT_DIR"
if [[ "$TUI_DIR" =~ ^/home/([^/]+) ]]; then
    TUI_DIR="~${TUI_DIR#"/home/${BASH_REMATCH[1]}"}"
fi

# if we use sys or user PATH, etc.
TUI_SYS() {
    [[ "$TUI_AS_SYS" == "true" || "$TUI_AS_SYS" == "on" || "$TUI_AS_SYS" == "1" ]]
}
# if sudo is used to run the script
TUI_SUDO() {
  [[ "$EUID" -eq 0 ]]
}


# If TUI_HOME and TUI_PATH and TUI_SHARE are not set, check on sudo and build them
if [[ -z "$TUI_HOME" ]]; then
    # If sudo - get the Users PATH & HOME
    if TUI_SUDO && ! TUI_SYS; then
        TUI_HOME=$(sudo -u "$SUDO_USER" bash -c 'echo $HOME')
    else
        TUI_HOME="$HOME"
    fi
fi
if [[ -z "$TUI_PATH" ]]; then
    # If sudo - get the Users PATH
    if TUI_SUDO && ! TUI_SYS; then
        TUI_PATH=$(sudo -u "$SUDO_USER" bash -c 'echo $PATH')
    else
        TUI_PATH="$PATH"
    fi
fi


# Priority list of system bin destinations
BIN_SYS_LIST=(
    "/usr/local/sbin"
    "/usr/local/bin"
    "/usr/sbin"
    "/usr/bin"
    "/sbin"
    "/bin"
    "$TUI_HOME/bin"
    "$TUI_HOME/.local/bin"
)
# Priority list of user bin destinations
BIN_USR_LIST=(
    "$TUI_HOME/bin"
    "$TUI_HOME/.local/bin"
    "/usr/local/sbin"
    "/usr/local/bin"
    "/usr/sbin"
    "/usr/bin"
    "/sbin"
    "/bin"
)
# Priority list of system share destinations
SHARE_SYS_LIST=(
    "/usr/local/share"
    "/usr/share"
    "$TUI_HOME/.local/share"
    "$TUI_HOME/share"
) 
# Priority list of user share destinations
SHARE_USR_LIST=(
    "$TUI_HOME/.local/share"
    "$TUI_HOME/share"
    "/usr/local/share"
    "/usr/share"
)
# Priority list of system lib destinations
LIB_SYS_LIST=(
    "/usr/local/lib"
    "/usr/lib"
    "$TUI_HOME/.local/lib"
    "$TUI_HOME/lib"
)
# Priority list of user lib destinations
LIB_USR_LIST=(
    "$TUI_HOME/.local/lib"
    "$TUI_HOME/lib"
    "/usr/local/lib"
    "/usr/lib"
)

# BIN_DIR is eventually already set by the main script - but if not:
GetBinDir() {
    if TUI_SYS; then
        search_list=("${BIN_SYS_LIST[@]}")
    else
        search_list=("${BIN_USR_LIST[@]}")
    fi
    for dir in "${search_list[@]}"; do
        if [[ ":$TUI_PATH:" == *":$dir:"* ]]; then
            BIN_DIR="$dir"
            return 0
        fi
    done
    # If no BIN_DIR is set, use the first entry in LIST which exists
    for dir in "${search_list[@]}"; do
        if [[ -d "$dir" ]]; then
            BIN_DIR="$dir"
            return 0
        fi
    done
    BIN_DIR="$SCRIPT_DIR/bin"  # Fallback to script directory
}
if [[ -z "$BIN_DIR" ]]; then
    GetBinDir
    # Check if BIN_DIR exists - if not, create it
    if [[ ! -d "$BIN_DIR" ]]; then
        if ! mkdir -p "$BIN_DIR"; then
            printf "${escRedBold}Error${escReset}: No valid BIN_DIR: '$escBold$BIN_DIR$escReset'\n\n" >&2
            exit 1
        fi
    fi
fi

# SHARE_DIR is eventually already set by the main script - but if not:
GetShareDir() {
    if TUI_SYS; then
        search_list=("${SHARE_SYS_LIST[@]}")
    else
        search_list=("${SHARE_USR_LIST[@]}")
    fi
    # Use the first entry in LIST which exists
    for dir in "${search_list[@]}"; do
        if [[ -d "$dir" ]]; then
            SHARE_DIR="$dir"
            return 0
        fi
    done
    SHARE_DIR="$SCRIPT_DIR/share"  # Fallback to script directory
}
if [[ -z "$SHARE_DIR" ]]; then
    GetShareDir
    # Check if SHARE_DIR exists - if not, create it
    if [[ ! -d "$SHARE_DIR" ]]; then
        if ! mkdir -p "$SHARE_DIR"; then
            printf "${escRedBold}Error${escReset}: No valid SHARE_DIR: '$escBold$SHARE_DIR$escReset'\n\n" >&2
            exit 1
        fi
    fi
fi

# LIB_DIR is eventually already set by the main script - but if not:
GetLibDir() {
    if TUI_SYS; then
        search_list=("${LIB_SYS_LIST[@]}")
    else
        search_list=("${LIB_USR_LIST[@]}")
    fi
    # Use the first entry in LIST which exists
    for dir in "${search_list[@]}"; do
        if [[ -d "$dir" ]]; then
            LIB_DIR="$dir"
            return 0
        fi
    done
    LIB_DIR="$SCRIPT_DIR/lib"  # Fallback to script directory
}
if [[ -z "$LIB_DIR" ]]; then
    GetLibDir
    # Check if LIB_DIR exists - if not, create it
    if [[ ! -d "$LIB_DIR" ]]; then
        if ! mkdir -p "$LIB_DIR"; then
            printf "${escRedBold}Error${escReset}: No valid LIB_DIR: '$escBold$LIB_DIR$escReset'\n\n" >&2
            exit 1
        fi
    fi
fi

###  G L O B A L  -  Variables  ###


###  E S C  -  constants  ###
esc="\033"
csi="${esc}["
escBold="${csi}1m"
escItalic="${csi}3m"
escUnderline="${csi}4m"
escUnderlineBold="${escUnderline}${escBold}"
escDblUnderline="${csi}21m"
escReverse="${csi}7m"
escHidden="${csi}8m"
escStrike="${csi}9m"
escBoldItalic="${csi}1;3m"
escResetBold="${csi}22m"
escResetFaint="${csi}22m"
escResetItalic="${csi}23m"
escResetUnderline="${csi}24m"
escResetReverse="${csi}27m"
escResetHidden="${csi}28m"
escResetStrike="${csi}29m"
escFaint="${csi}2m"
escReset="${csi}0m"
escGreen="${csi}32m"
escRed="${csi}31m"
escYellow="${csi}33m"
escBlue="${csi}34m"
escCyan="${csi}36m"
escMagenta="${csi}35m"
escWhite="${csi}37m"
escBlack="${csi}30m"
escGray="${csi}90m"
escGreenBold="${escGreen}${escBold}"
escRedBold="${escRed}${escBold}"
escYellowBold="${escYellow}${escBold}"
escBlueBold="${escBlue}${escBold}"
escCyanBold="${escCyan}${escBold}"
escMagentaBold="${escMagenta}${escBold}"
escWhiteBold="${escWhite}${escBold}"
escBlackBold="${escBlack}${escBold}"
escGrayBold="${escGray}${escBold}"
escOK="$escGreenBold✔$escReset"
escNOK="$escRedBold✘$escReset"
escWARN="$escYellowBold☡$escReset"
###  E S C  -  constants  ###


###  F u n c t i o n s  - generic  ###
GetCursor() {
    # Get current cursor position
    exec < /dev/tty
    printf "${csi}6n"

    # Read response: ESC [ row ; col R
    IFS=';' read -sdR -r pos
    pos="${pos#*[}" # Remove ESC[
    CURSOR_Y="${pos%%;*}"      # Row
    CURSOR_X="${pos##*;}"      # Column
}
SaveCursor() {
    # (re)set ram-cursor position from actual terminal position
    local idx="$1"
    local strTrail="$2"
    local pos

    # Request cursor position from terminal
    GetCursor
    CURSOR_Y_ARR[idx]="$CURSOR_Y"      # Row
    CURSOR_X_ARR[idx]="$CURSOR_X"      # Column

    if [[ -n "$strTrail" ]]; then
        printf "$strTrail"
    fi
}
SaveCursorXY() {
    # (re)set ram-cursor position manually
    local idx="$1"
    local posX="$2"
    local posY="$3"
    CURSOR_Y_ARR[idx]="$posY"      # Row
    CURSOR_X_ARR[idx]="$posX"      # Column
}
SetCursor() {
    local x="$1"
    local y="$2"
    # Set cursor position
    printf "${csi}%d;%dH" "$y" "$x"
}
RestoreCursor() {
    local idx="$1"
    # Set cursor position
    SetCursor "${CURSOR_X_ARR[idx]}" "${CURSOR_Y_ARR[idx]}"
}
UpCursor() {
    local -i lines="$1"
    # Move cursor up
    printf "${csi}%dA" "$lines"
}
DownCursor() {
    local -i lines="$1"
    # Move cursor down
    printf "${csi}%dB" "$lines"
}
LeftCursor() {
    local -i cols="$1"
    # Move cursor left
    printf "${csi}%dD" "$cols"
}
RightCursor() {
    local -i cols="$1"
    # Move cursor right
    printf "${csi}%dC" "$cols"
}
GetTermSize() {
    # Get terminal size
    if [[ -t 1 ]]; then
        read -r TERM_Y TERM_X < <(stty size)
    else
        TERM_Y=24
        TERM_X=80
    fi
}
printOK() {
    local strTrail="$1"
    printf "[$escOK]$strTrail"
}
printNOK() {
    local strTrail="$1"
    printf "[$escNOK]$strTrail"
}
printWARN() {
    local strTrail="$1"
    printf "[$escWARN]$strTrail"
}
printCheckReasonExit(){
    printf "${escBold}Please check the reason(s)!$escReset\n\n" >&2
    exit 1    
}
printAction(){
    local strTrail="$1"
    printCNT $action $actionLen " " " $strTrail"
    ((action += 1))
}
printCNT() {
    local -i n="$1"    # Value to print
    local -i len="$2"  # Fixed Len for the value e.g. 3 for "00n", "  n"
    local strLead="$3"
    local strTrail="$4"
    # Print a "Action-Counter"
    local retVal="$(strFixNum "$n" "$len")"
    printf "$strLead[$escCyanBold$retVal$escReset]$strTrail" 
}
strFixNum() {
    local -i n="$1"   # Value
    local -i cnt="$2" # Fixed Len for the value e.g. 3 for "00n", "  n"
    local c="$3"      # Character to use for padding
    local out
    local -i len=${#n}
    [[ -z "$c" ]] && c=" "
    if [[ $n -lt 0 ]]; then
        # remove leading minus sign
        n="${n#-}"
        out="-"
    fi
    for ((i = len; i < cnt; i++)); do
        out+="$c"
    done
    out+="$n"
    printf "%s" "$out"
}
delLines() {
    local -i lines="$1"
    # Delete lines from terminal
    if [[ $lines -gt 0 ]]; then
        printf "${csi}%dM" "$lines"
    fi
}
clrLines() {
    local -i lines="$1"
    for ((i=0; i<lines; i++)); do
        printf "${csi}2K"
        printf "${csi}1E"
    done
}
getConfigFile(){
    printAction "Check & Get '$escBold$CONF_PRT$escReset' file... "
    if [[ -f "$CONF_FILE" ]]; then
        source "$CONF_FILE"
    else
        printNOK
        printf "\n\tConfig '$CONF_PRT' not found.\n\t" >&2
        printCheckReasonExit
    fi
    printOK "\n"
}
testConfigFile(){
    # Check if all required variables are existing
    local -i MISSING=0
    printAction "${escBold}Test variables$escReset in '$CONF_PRT'... "
    for var in "${REQUIRED_VARS[@]}"; do
        if ! [[ -v $var ]]; then
            printf "\n\tMissing Variable(s): $var" >&2
            MISSING=1
        fi
    done
    if [[ $MISSING -ne 0 ]]; then
        printNOK
        printf "\n\tMissing var(s) in '$CONF_PRT' file.\n\t" >&2
        printCheckReasonExit
    fi
    printOK "\n"
}
checkRoot(){
    printAction "Check for$escBold root$escReset privileges... "
    # Check for root privileges
    if ! TUI_SUDO; then
        printNOK
        printf "\n${escBold} Missing root privileges - start script with sudo...!$escReset\n\n" >&2
        exit 1
    fi
    printOK "\n"
}
injectVARS(){
    local destFile="$1"
    local destPRT="$destFile"
    if [[ "$destPRT" =~ ^/home/([^/]+) ]]; then
        destPRT="~${destPRT#"/home/${BASH_REMATCH[1]}"}"
    fi
    local srcLST=("${!2}")
    local dstLST=("${!3}")
    local doPRT="$4"
    if [[ -z "$doPRT" ]]; then
        doPRT="true"
    fi
    if [[ "$doPRT" == "true" ]]; then
        printAction "${escBold}Inject variables$escReset into '$destPRT'... "
    fi
    for i in "${!srcLST[@]}"; do
        src_var="${srcLST[$i]}"
        dest_placeholder="${dstLST[$i]}"
        if ! [[ -v $src_var ]]; then
            if [[ "$doPRT" == "true" ]]; then
                printNOK "\n"
            fi
            printf "\tVariable '$src_var' does not exist.\n\t" >&2
            printCheckReasonExit
        fi
        # Check if placeholder exists in the wrapper script
        if ! grep -q "$dest_placeholder" "$destFile"; then
            if [[ "$doPRT" == "true" ]]; then
                printNOK "\n"
            fi
            printf "\tPlaceholder '$dest_placeholder' not found in '$destPRT'.\n\t" >&2
            printCheckReasonExit
        fi
        sed -i "s|${dest_placeholder}|${!src_var}|g" "$destFile"
    done
    if [[ "$doPRT" == "true" ]]; then
        printOK "\n"
    fi
}
getValidPassword() {
    local pwd="$1"
    local forbidden="$2"
    local pwd2="$1"
    # $3 is return variable
    local pinLen="$4"
    local strTXT="$5"
    local secret="$6"
    if [[ -z "$pinLen" ]]; then
        pinLen="8"
    fi
    if [[ -z "$strTXT" ]]; then
        strTXT="Password"
    fi
    if [[ ${#pwd} -lt $pinLen || "$pwd" == "$forbidden" ]]; then
        pwd=""
        while true; do
            printf "\tPlease enter a new $strTXT: "
            if [[ -z "$secret" ]]; then
                # secret
                read -s pwd
                echo
                delLines 2
                printf "\tPlease verify the $strTXT: "
                read -s pwd2
            else
                # not secret
                read -e pwd
                echo
                delLines 2
                pwd2="$pwd"
            fi
            echo
            if [[ "$pwd" != "$pwd2" ]]; then
                printf "\t{$strTXT}s do not match. Please try again."
                UpCursor 2
                clrLines 2
                UpCursor 2
                continue
            fi
            if [[ ${#pwd} -lt $pinLen ]]; then
                printf "\t$strTXT must be at least $pinLen characters long. Try again."
                UpCursor 2
                clrLines 2
                UpCursor 2
                continue
            fi
            break
        done
    fi
    UpCursor 2
    delLines 3
    eval "$3"='$pwd'
}
copyFiles() {
    # Function to loop copies
    local filesLST=("${!1}")
    local destLST=("${!2}")
    local strType="$3"
    local -i locCnt=0
    local -i cnt=${#filesLST[@]}
    local -i fold=0
    printAction "Copying$escBlueBold $cnt$escReset local$escBlueBold $strType$escReset files... "
    SaveCursor 1 "\n"
    for i in "${!filesLST[@]}"; do
        if [[ $fold -eq 1 ]]; then
            UpCursor 1
            delLines 1
        fi
        local destPRT="${destLST[$i]}"
        if [[ "$destPRT" =~ ^/home/([^/]+) ]]; then
            destPRT="~${destPRT#"/home/${BASH_REMATCH[1]}"}"
        fi
        if ! cp "${filesLST[$i]}" "${destLST[$i]}" 2> /dev/null; then
            printf "\t$escRed$destPRT$escReset\n"
            locCnt=$((locCnt + 1))
        else
            printf "\t$destPRT\n"
            # If file ends with ".sh", make it executable
            [[ "${destLST[$i]}" == *.sh ]] && chmod +x "${destLST[$i]}" 2>/dev/null || true
        fi
        if [[ $((CURSOR_Y_ARR[1] + finalCNT + 1)) -gt TERM_Y ]]; then
            fold=1
        fi
    done
    if [[ $fold -eq 1 ]]; then
        UpCursor 1
        delLines 1
    fi
    SaveCursor 2
    RestoreCursor 1
    if [[ $locCnt -gt 0 ]]; then
        if [[ $locCnt -eq ${#filesLST[@]} ]]; then
            printNOK
        else
            printWARN
        fi
    else
        printOK
    fi
    errCnt=$((errCnt + locCnt))
    RestoreCursor 2
    return $locCnt
}
downloadFiles() {
    # Function to loop download
    local target="$1"
    local url="$2"
    local filesLST=("${!3}")
    local -i locCnt=0
    local -i cnt=${#filesLST[@]}
    local -i fold=0
    printAction "Curl$escBlueBold $cnt ${escReset}files for $target/... "
    SaveCursor 1 "\n"
    for file in "${filesLST[@]}"; do
        if [[ $fold -eq 1 ]]; then
            UpCursor 1
            delLines 1
        fi
        if ! curl -s -o "$target/$file" "$url/$file"; then
            printf "\t$escRed$file$escReset\n"
            # Remove error file if empty
            if [[ -f "$target/$file" && ! -s "$target/$file" ]]; then
                rm -f "$target/$file"
            fi
            locCnt=$((locCnt + 1))
        else
            printf "\t$file\n"
            # If file ends with ".sh", make it executable
            [[ "$file" == *.sh ]] && chmod +x "$target/$file" 2>/dev/null || true
        fi
        if [[ $((CURSOR_Y_ARR[1] + finalCNT + 1)) -gt TERM_Y ]]; then
            fold=1
        fi
    done
    if [[ $fold -eq 1 ]]; then
        UpCursor 1
        delLines 1
    fi
    SaveCursor 2
    RestoreCursor 1
    if [[ $locCnt -gt 0 ]]; then
        if [[ $locCnt -eq ${#filesLST[@]} ]]; then
            printNOK
        else
            printWARN
        fi
    else
        printOK
    fi
    errCnt=$((errCnt + locCnt))
    RestoreCursor 2
    echo
    return $locCnt
}
makeDirs(){
    #Function to loop the to create directories
    local dirsList=("${!1}")
    local -i locCnt=0
    # Elements in dirs array
    local cnt=${#dirsList[@]}
    local -i fold=0
    printAction "Creating & Checking$escBlueBold $cnt ${escReset}Directories... "
    SaveCursor 1 "\n"
    for dir in "${dirsList[@]}"; do

        DIR_PRT="$dir"
        if [[ "$DIR_PRT" =~ ^/home/([^/]+) ]]; then
            DIR_PRT="~${DIR_PRT#"/home/${BASH_REMATCH[1]}"}"
        fi

        if [[ $fold -eq 1 ]]; then
            UpCursor 1
            delLines 1
        fi
        if ! mkdir -p "$dir"; then
            printf "\t$escRed$DIR_PRT$escReset\n"
            locCnt=$((locCnt + 1))
        else
            printf "\t$DIR_PRT\n"
        fi
        if [[ $((CURSOR_Y_ARR[1] + finalCNT + 1)) -gt TERM_Y ]]; then
            fold=1
        fi
        sleep 0.25 
    done
    if [[ $fold -eq 1 ]]; then
        UpCursor 1
        delLines 1
    fi
    SaveCursor 2 "\n"
    RestoreCursor 1
    if [[ $locCnt -gt 0 ]]; then
        if [[ $locCnt -eq ${#dirsList[@]} ]]; then
            printNOK
        else
            printWARN
        fi
    else
        printOK
    fi
    RestoreCursor 2
    echo
    return $locCnt
}
###  F u n c t i o n s  ###

